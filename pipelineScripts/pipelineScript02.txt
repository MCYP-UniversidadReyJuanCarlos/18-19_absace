//Script verde

node {
	stage ('Checkout') {
		git 'https://github.com/WebGoat/WebGoat.git'
	}

	stage ('Build') {
		try {
			withMaven(maven: 'maven'){
				sh 'mvn -version'
				sh 'mvn clean install'
			} // withMaven will discover the generated Maven artifacts, JUnit Surefire & FailSafe & FindBugs & SpotBugs reports...
		}
		catch (exc) {
			echo 'Something failed in Building MVN'
		}
		try {
			def customImage = docker.build("webgoatASC_${env.BUILD_ID}", "-f ./webgoat-server/Dockerfile")
			customImage.inside {
				sh 'make test'
			}
		}
		catch (exc) {
			echo 'Something failed in Building DockerIMAGE'
		}
	}

	stage('SonarQube Scan') {
		withSonarQubeEnv('SonarQubeServer'){// Optionally use a Maven environment you've configured already
			withMaven(maven: 'maven'){
				sh 'mvn sonar:sonar'
			}
		}
	}
	
	// No need to occupy a node
	stage("Quality Gate") {
		timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
			def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
			if (qg.status != 'OK') {
				error "Pipeline aborted due to quality gate failure: ${qg.status}"
			}
		}
	}
}